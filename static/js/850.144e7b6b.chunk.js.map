{"version":3,"file":"static/js/850.144e7b6b.chunk.js","mappings":"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","sources":["webpack://chaosx-18/./src/components/Mining/styles.module.scss?3d4e","components/Mining/Mining.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"whiteUnderlineHover\":\"styles_whiteUnderlineHover__RKk8i\",\"orangeUnderlineHover\":\"styles_orangeUnderlineHover__3Br3a\",\"blueUnderlineHover\":\"styles_blueUnderlineHover__NFbjJ\",\"divHoverEffect\":\"styles_divHoverEffect__tuwxX\",\"container\":\"styles_container__HW8Lb\",\"container_miningInfo\":\"styles_container_miningInfo__ISrps\",\"container_miningInfo_aurumBoosters\":\"styles_container_miningInfo_aurumBoosters__EY-dL\",\"container_miningInfo_celiumBoosters\":\"styles_container_miningInfo_celiumBoosters__TTPLf\",\"container_miningInfo_timeInfo\":\"styles_container_miningInfo_timeInfo__51cuT\",\"container_miningInfo_mainInfo\":\"styles_container_miningInfo_mainInfo__hf1vM\",\"container_buttonWrapper\":\"styles_container_buttonWrapper__ooiE-\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { motion } from \"framer-motion\";\r\nimport { toast } from \"react-toastify\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { User } from \"../../UserService\";\r\nimport {\r\n  getMyNfts,\r\n  getMyWorkingNfts,\r\n} from \"../../GlobalState/NftsSlice/nftsSlice\";\r\nimport Button from \"../Button/Button\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nimport mineAurum from \"../../assets/images/nfts/Mine-Aurum.webp\";\r\nimport mineCelium from \"../../assets/images/nfts/Mine-Celium.webp\";\r\nimport buildingSlot from \"../../assets/images/nfts/Building-Slot.webp\";\r\nimport levelUpToken from \"../../assets/images/nfts/Level-Up-Token.webp\";\r\nimport teleportToChaos from \"../../assets/images/nfts/Teleport.webp\";\r\n\r\nconst MyNftCard = React.lazy(() =>\r\n  import(\"../../components/Nft/MyNftCard/MyNftCard\")\r\n);\r\n\r\nconst images = {\r\n  \"Chaos X-18 Mine Aurum\": mineAurum,\r\n  \"ChaosX-18 Mine Celium\": mineCelium,\r\n  \"ChaosX-18 Building Slot\": buildingSlot,\r\n  \"ChaosX-18 Level Up token\": levelUpToken,\r\n  \"Teleport to ChaosX-18\": teleportToChaos,\r\n};\r\n\r\nconst Mining = ({ mine }) => {\r\n  const scrollRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const [buttonLoader, setButtonLoader] = useState(null);\r\n  const { waxConnected, anchorConnected } = useSelector((state) => state.user);\r\n  const { myWorkingNfts, myNfts } = useSelector((state) => state.nfts);\r\n  const miningTransition = {\r\n    type: \"spring\",\r\n    ease: \"easeInOut\",\r\n    damping: 35,\r\n    delay: 0.5,\r\n  };\r\n  const Variants = {\r\n    initial: { opacity: 0 },\r\n    whileInView: { opacity: 1 },\r\n  };\r\n\r\n  // mine\r\n  const mineWithAnchor = () => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(\"Mine\");\r\n    User.anchorSession\r\n      ?.transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"xcryptochaos\",\r\n              name: \"minetoken\",\r\n              authorization: [\r\n                {\r\n                  actor: User.anchorSession?.auth?.actor.toString(),\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                player: User.anchorSession?.auth?.actor.toString(),\r\n                mineId: mine?.id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\"Resources collecting has successfully started\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"You can't claim now, upgrade in progress\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const mineWithWax = () => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(\"Mine\");\r\n    User.wax.api\r\n      .transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"xcryptochaos\",\r\n              name: \"minetoken\",\r\n              authorization: [\r\n                {\r\n                  actor: User.wax?.userAccount,\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                player: User.wax?.userAccount,\r\n                mineId: mine?.id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\"Resources collecting has successfully started\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"You can't claim now, upgrade in progress\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const mineNft = () => {\r\n    if (anchorConnected) {\r\n      mineWithAnchor();\r\n    } else if (waxConnected) {\r\n      mineWithWax();\r\n    }\r\n  };\r\n\r\n  // upgrade\r\n  const upgradeWithAnchor = (nft, levelUp) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(nft.asset_id);\r\n    User.anchorSession\r\n      ?.transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"atomicassets\",\r\n              name: \"transfer\",\r\n              authorization: [\r\n                {\r\n                  actor: User.anchorSession?.auth?.actor.toString(),\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                from: User.anchorSession?.auth?.actor.toString(),\r\n                to: \"xcryptochaos\",\r\n                asset_ids: [levelUp.asset_id],\r\n                memo: \"burn@level@\" + nft.asset_id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\r\n          \"Mine upgrading started, you can mine it when it will be finished\"\r\n        );\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Mine doesn't upgraded, try again after one minute\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const upgradeWithWaxCloud = (nft, levelUp) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(nft.asset_id);\r\n    User.wax.api\r\n      .transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"atomicassets\",\r\n              name: \"transfer\",\r\n              authorization: [\r\n                {\r\n                  actor: User.wax?.userAccount,\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                from: User.wax?.userAccount,\r\n                to: \"xcryptochaos\",\r\n                asset_ids: [levelUp.asset_id],\r\n                memo: \"burn@level@\" + nft.asset_id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\r\n          \"Mine upgrading started, you can mine it when it will be finished\"\r\n        );\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Mine doesn't upgraded, try again after one minute\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const upgradeNft = (nft) => {\r\n    const levelUp = myNfts.filter(\r\n      (nft) => nft.name === \"ChaosX-18 Level Up token\"\r\n    );\r\n    if (levelUp[0]) {\r\n      if (anchorConnected) {\r\n        upgradeWithAnchor(nft, levelUp[0]);\r\n      } else if (waxConnected) {\r\n        upgradeWithWaxCloud(nft, levelUp[0]);\r\n      }\r\n    } else {\r\n      toast.error(\"To upgrade your mine purchase ChaosX-18 Level Up token\");\r\n      return;\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  const [timeRemaining, setTimeRemaining] = useState(0);\r\n\r\n  // Funzione per avviare il timer e pianificare la ricarica\r\n  const startUpgradeTimer = () => {\r\n    const upgradeTime = new Date(mine.lastUpgrade).getTime();\r\n\tconsole.log(\"Valore di upgradeTime:\", upgradeTime); // Inserisci questo log\r\n\r\n    if (upgradeTime === 0) {\r\n      return; // L'aggiornamento non è in corso\r\n    }\r\n\r\n    const now = new Date().getTime();\r\n    const timeDifference = upgradeTime - now;\r\n\tconsole.log(\"Valore di timeDifference:\", timeDifference); // Inserisci questo log\r\n\r\n    if (timeDifference > 0) {\r\n      // Calcola il tempo rimanente e aggiorna lo stato\r\n      setTimeRemaining(timeDifference);\r\n\t  console.log(\"Valore di timeRemaining:\", timeRemaining); // Inserisci questo log\r\n\r\n\r\n      // Crea un timer per l'aggiornamento\r\n      const timer = setInterval(() => {\r\n        const updatedTimeDifference = upgradeTime - new Date().getTime();\r\n\t\tconsole.log(\"Valore di updatedTimeDifference:\", updatedTimeDifference); // Inserisci questo log\r\n\r\n        if (updatedTimeDifference <= 0) {\r\n          // Il timer è scaduto, ricarica la pagina\r\n          clearInterval(timer);\r\n          setTimeout(() => {\r\n            window.location.reload();\r\n          }, 1000);\r\n        } else {\r\n          // Aggiorna il tempo rimanente\r\n          setTimeRemaining(updatedTimeDifference);\r\n        }\r\n      }, 1000);\r\n    }\r\n  };\r\n  \r\n  console.log(\"Valore di timeRemaining fuori dalla funzione startUpgradeTimer:\", timeRemaining);\r\n  \r\n  \r\n  \r\n  useEffect(() => {\r\n    if (mine) {\r\n      setTimeout(() => {\r\n        dispatch(getMyWorkingNfts(mine.asset_id));\r\n      }, 1000);\r\n    }\r\n    dispatch(getMyNfts());\r\n  }, [dispatch, mine]);\r\n  \r\n  useEffect(() => {\r\n    startUpgradeTimer(); // Avvia il timer quando il componente viene montato\r\n  }, []);\r\n\r\n  return (\r\n    <motion.div\r\n      viewport={{ root: scrollRef, once: true }}\r\n      transition={miningTransition}\r\n      variants={Variants}\r\n      initial=\"initial\"\r\n      whileInView=\"whileInView\"\r\n      className={styles.container}\r\n    >\r\n      {myWorkingNfts && (\r\n        <React.Suspense fallback={<Loader size={250} />} key={mine.asset_id}>\r\n          <MyNftCard\r\n            key={mine?.asset_id}\r\n            nft={myWorkingNfts[mine?.asset_id]}\r\n            image={images[myWorkingNfts[mine?.asset_id]?.name]}\r\n            functional={false}\r\n\t\t\tmineLevel={mine.level}\r\n          />\r\n        </React.Suspense>\r\n      )}\r\n      {mine && (\r\n        <div className={styles.container_miningInfo}>\r\n          <div className={styles.container_miningInfo_aurumBoosters}>\r\n            <p>\r\n              <b>First booster: </b>\r\n              {new Date(mine.bstrOne).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"Not yet available\"\r\n                : new Date(mine.bstrOne).toLocaleString()}\r\n            </p>\r\n            <p>\r\n              <b>Second booster: </b>\r\n              {new Date(mine.bstrTwo).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"Not yet available\"\r\n                : new Date(mine.bstrTwo).toLocaleString()}\r\n            </p>\r\n          </div>\r\n          <div className={styles.container_miningInfo_timeInfo}>\r\n            <p>\r\n              <b>Last time claimed: </b>\r\n              {new Date(mine.lastMined).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"None\"\r\n                : new Date(mine.lastMined).toLocaleString()}\r\n            </p>\r\n            <p>\r\n              <b>Last time upgrade: </b>\r\n              {new Date(mine.lastUpgrade).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"Upgrade not in progress\"\r\n                : new Date(mine.lastUpgrade).toLocaleString()}\r\n            </p>\r\n\t\t\t{timeRemaining > 0 && (\r\n\t\t\t  <p>\r\n\t\t\t    <b>Time remaining for upgrade: </b>\r\n\t\t\t    {formatTimeRemaining(timeRemaining)}\r\n\t\t\t  </p>\r\n\t\t\t)}\t\t\t\r\n            <p>\r\n              <b>Unstake time: </b>\r\n              {new Date(mine.unstake_time).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"Unstake not in progress\"\r\n                : new Date(mine.unstake_time).toLocaleString()}\r\n            </p>\r\n          </div>\r\n          <div className={styles.container_miningInfo_mainInfo}>\r\n            <p>\r\n              <b>Miner level: </b>\r\n              {mine.level}\r\n            </p>\r\n            {/*<p>\r\n              //<b>Miner locked: </b>\r\n              //{mine.is_locked === 0 ? \"No\" : \"Yes\"}\r\n            //</p>\r\n            //<p>\r\n              //<b>Miner staked: </b>\r\n              //{mine.is_staked === 0 ? \"No\" : \"Yes\"}\r\n            //</p>*/}\r\n          </div>\r\n        </div>\r\n      )}\r\n\t  {/*console.log(\"Valore di timeRemaining dopo il render:\", timeRemaining);*/}\r\n\r\n      <div className={styles.container_buttonWrapper}>\r\n        <Button onClick={mineNft} loader={buttonLoader} size=\"fit\" color=\"blue\">\r\n          Claim now\r\n        </Button>\r\n        <Button\r\n          onClick={() => upgradeNft(myWorkingNfts[mine?.asset_id])}\r\n          loader={buttonLoader}\r\n          size=\"fit\"\r\n          color=\"blue\"\r\n        >\r\n          Upgrade now\r\n        </Button>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nfunction formatTimeRemaining(timeRemaining) {\r\n  const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));\r\n  const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n  const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));\r\n  const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);\r\n\r\n  let formattedTime = '';\r\n\r\n  if (days > 0) {\r\n    formattedTime += `${days}d `;\r\n  }\r\n  if (hours > 0) {\r\n    formattedTime += `${hours}h `;\r\n  }\r\n  if (minutes > 0) {\r\n    formattedTime += `${minutes}m `;\r\n  }\r\n  formattedTime += `${seconds}s`;\r\n\r\n  return formattedTime;\r\n}\r\n\r\n\r\nexport default Mining;\r\n"],"names":["MyNftCard","React","images","mineAurum","mineCelium","buildingSlot","levelUpToken","teleportToChaos","formatTimeRemaining","timeRemaining","days","Math","floor","hours","minutes","seconds","formattedTime","concat","_ref","_myWorkingNfts$mine$a","mine","scrollRef","useRef","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","buttonLoader","setButtonLoader","_useSelector","useSelector","state","user","waxConnected","anchorConnected","_useSelector2","nfts","myWorkingNfts","myNfts","upgradeNft","nft","levelUp","filter","name","_User$anchorSession4","_User$anchorSession5","_User$anchorSession5$","_User$anchorSession6","_User$anchorSession6$","asset_id","User","anchorSession","transact","actions","account","authorization","actor","auth","toString","permission","data","from","to","asset_ids","memo","blocksBehind","expireSeconds","then","_","toast","success","catch","error","upgradeWithAnchor","_User$wax3","_User$wax4","wax","api","userAccount","upgradeWithWaxCloud","_useState3","_useState4","setTimeRemaining","console","log","useEffect","setTimeout","getMyWorkingNfts","getMyNfts","upgradeTime","Date","lastUpgrade","getTime","now","timeDifference","timer","setInterval","updatedTimeDifference","clearInterval","window","location","reload","startUpgradeTimer","_jsxs","motion","div","viewport","root","once","transition","type","ease","damping","delay","variants","initial","opacity","whileInView","className","styles","children","_jsx","fallback","Loader","size","image","functional","mineLevel","level","bstrOne","toLocaleString","bstrTwo","lastMined","unstake_time","Button","onClick","_User$anchorSession","_User$anchorSession2","_User$anchorSession2$","_User$anchorSession3","_User$anchorSession3$","player","mineId","id","mineWithAnchor","_User$wax","_User$wax2","mineWithWax","loader","color"],"sourceRoot":""}