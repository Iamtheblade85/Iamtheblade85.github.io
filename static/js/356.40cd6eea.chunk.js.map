{"version":3,"file":"static/js/356.40cd6eea.chunk.js","mappings":"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","sources":["webpack://chaosx-18/./src/components/Checkbox/styles.module.scss?72ad","components/Checkbox/Checkbox.jsx","webpack://chaosx-18/./src/components/Modal/ViewNftDetailsModal/styles.module.scss?f380","components/Modal/ViewNftDetailsModal/ViewNftDetailsModal.jsx","webpack://chaosx-18/./src/components/Nft/MyNftCard/styles.module.scss?af69","components/Nft/MyNftCard/MyNftCard.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"whiteUnderlineHover\":\"styles_whiteUnderlineHover__EwQhO\",\"orangeUnderlineHover\":\"styles_orangeUnderlineHover__tSnCx\",\"blueUnderlineHover\":\"styles_blueUnderlineHover__cP9A3\",\"divHoverEffect\":\"styles_divHoverEffect__1yFKF\",\"checkbox\":\"styles_checkbox__hj+Ln\",\"input\":\"styles_input__QUvp2\",\"checkmark\":\"styles_checkmark__2IdXY\"};","import React from \"react\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nconst Checkbox = ({ checked, onChange }) => {\r\n  return (\r\n    <label className={styles.checkbox}>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={checked}\r\n        onChange={onChange}\r\n        className={styles.input}\r\n      />\r\n      <span className={styles.checkmark}></span>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Checkbox;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"styles_container__b7JEH\",\"container_modal\":\"styles_container_modal__7tYxP\",\"container_modal_modalHeader\":\"styles_container_modal_modalHeader__Sw-6H\",\"container_modal_modalHeader_close\":\"styles_container_modal_modalHeader_close__Qx1VI\",\"container_modal_modalBody\":\"styles_container_modal_modalBody__54h2z\",\"container_modal_modalFooter\":\"styles_container_modal_modalFooter__zP3bD\",\"modalHeader\":\"styles_modalHeader__NRX0B\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport styles from \"./styles.module.scss\";\r\nimport Button from \"../../Button/Button\";\r\nimport closeIcon from \"../../../assets/images/icons/icons8-close-48.png\";\r\n\r\nconst calculateProduction = (mineLevel, nftName) => {\r\n  const currentProduction = calculateSingleProduction(mineLevel, nftName);\r\n  const nextProduction = calculateSingleProduction(mineLevel + 1, nftName);\r\n  const currentCost = calculateUpgradeCost(mineLevel, nftName);\r\n  const nextCost = calculateUpgradeCost(mineLevel + 1, nftName);\r\n  const currentUpgradeTime = calculateUpgradeTime(mineLevel, nftName);\r\n  const nextUpgradeTime = calculateUpgradeTime(mineLevel + 1, nftName);\r\n\r\n  return {\r\n    currentProduction,\r\n    nextProduction,\r\n    currentCost,\r\n    nextCost,\r\n    currentUpgradeTime,\r\n    nextUpgradeTime,\r\n  };\r\n};\r\n\r\nconst calculateSingleProduction = (mineLevel, nftName) => {\r\n  return parseFloat(\r\n    (\r\n      (nftName === \"Chaos X-18 Mine Aurum\" ? 3 : 2) * mineLevel * Math.pow(1.12, mineLevel)\r\n    ).toFixed(3)\r\n  );\r\n};\r\n  \r\nconst calculateUpgradeCost = (mineLevel, nftName) => {\r\n  let aurumCost = 0;\r\n  let celiumCost = 0;\r\n  let upgradeNFT = \"Upgrade NFT\";\r\n\r\n  if (nftName === \"Chaos X-18 Mine Aurum\") {\r\n    aurumCost = (56 * Math.pow(1.44, mineLevel - 1)).toFixed(3);\r\n    celiumCost = (14 * Math.pow(1.44, mineLevel - 1)).toFixed(3);\r\n  } else if (nftName === \"ChaosX-18 Mine Celium\") {\r\n    aurumCost = (46 * Math.pow(1.58, mineLevel - 1)).toFixed(3);\r\n    celiumCost = (23 * Math.pow(1.58, mineLevel - 1)).toFixed(3);\r\n  }\r\n\r\n  return {\r\n    aurumCost,\r\n    celiumCost,\r\n    upgradeNFT,\r\n  };\r\n};\r\n  \r\nconst calculateUpgradeTime = (mineLevel, nftName) => {\r\n  const totalSeconds = Math.floor(11 * Math.pow(1.55, mineLevel));\r\n  const hours = Math.floor(totalSeconds / 3600);\r\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n  const seconds = totalSeconds % 60;\r\n  return `${hours} hours ${minutes} minutes ${seconds} seconds`;\r\n};\r\n\r\n\r\nconst ViewNftDetailsModal = ({ onClose, description, effect, currentLevel, nextLevel, nftName }) => {\r\n  const modalRef = useRef(null);\r\n  const modalTransition = {\r\n    type: \"spring\",\r\n    ease: \"easeInOut\",\r\n    damping: 30,\r\n  };\r\n    const [timeRemaining, setTimeRemaining] = useState(0);\r\n\r\n  const startUpgradeTimer = () => {\r\n    const upgradeTime = new Date(mine.lastUpgrade).toLocaleString();\r\n\r\n    if (upgradeTime === \"1.1.1970, 00:00:00\") {\r\n      return; // Upgrade is not in progress\r\n    }\r\n\r\n    const neededTime = Math.floor(11 * Math.pow(1.55, mine.level)) * 1000;\r\n\r\n    if (neededTime > 0) {\r\n      setTimeRemaining(neededTime);\r\n\r\n      const timer = setInterval(() => {\r\n        setTimeRemaining((prevTimeRemaining) => {\r\n          const updatedTimeRemaining = prevTimeRemaining - 1000;\r\n\r\n          if (updatedTimeRemaining <= 0) {\r\n            clearInterval(timer);\r\n            setTimeout(() => {\r\n              window.location.reload();\r\n            }, 1000);\r\n            return 0;\r\n          } else {\r\n            return updatedTimeRemaining;\r\n          }\r\n        });\r\n      }, 1000);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    startUpgradeTimer();\r\n  }, []);\r\n\r\n  const formatTimeRemaining = (time) => {\r\n    const hours = Math.floor(time / 3600000);\r\n    const minutes = Math.floor((time % 3600000) / 60000);\r\n    const seconds = Math.floor((time % 60000) / 1000);\r\n\r\n    return `${hours} hours ${minutes} minutes ${seconds} seconds`;\r\n  };\r\n\r\n \r\n  return (\r\n    <motion.div\r\n      className={styles.container}\r\n      transition={modalTransition}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      ref={modalRef}\r\n      onClick={onClose}\r\n    >\r\n\t\t<div className={styles.container_modal} onClick={(e) => e.stopPropagation()}>\r\n        <div className={styles.container_modal_modalHeader}>\r\n          <h3>Description</h3>\r\n          <img\r\n            rel=\"preload\"\r\n            className={styles.container_modal_modalHeader_close}\r\n            src={closeIcon}\r\n            onClick={onClose}\r\n            alt=\"close icon\"\r\n          />\r\n        </div>\r\n\r\n        <div className={styles.container_modal_modalBody}>\r\n          <span>{description}</span>\r\n          {effect !== \"No effect\" && (\r\n            <div>\r\n              <h3>Effect</h3>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th>Current Level</th>\r\n                    <th>Next Level</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Current Production</td>\r\n                    <td>{calculateProduction(currentLevel, nftName).currentProduction}  </td>\r\n                    <td>{calculateProduction(nextLevel, nftName).currentProduction}  </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Current Cost (Aurum)</td>\r\n                    <td>{calculateProduction(currentLevel, nftName).currentCost.aurumCost}  </td>\r\n                    <td>{calculateProduction(nextLevel, nftName).currentCost.aurumCost}  </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Current Cost (Celium)</td>\r\n                    <td>{calculateProduction(currentLevel, nftName).currentCost.celiumCost}  </td>\r\n                    <td>{calculateProduction(nextLevel, nftName).currentCost.celiumCost}  </td>\r\n                  </tr>\r\n\t\t\t\t  <tr>\r\n                    <td>Burner</td>\r\n                    <td>{calculateUpgradeCost(currentLevel, nftName).upgradeNFT}</td>\r\n                    <td>{calculateUpgradeCost(nextLevel, nftName).upgradeNFT}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Upgrade Time </td>\r\n                    <td>{calculateProduction(currentLevel, nftName).currentUpgradeTime}  </td>\r\n                    <td>{calculateProduction(nextLevel, nftName).currentUpgradeTime}  </td>\r\n                  </tr>\r\n\t\t\t\t  <tr>\r\n                    <td>Time remaining for upgrade:</td>\r\n                    <td>\r\n                      <b>\r\n                        {timeRemaining > 0\r\n                          ? formatTimeRemaining(timeRemaining)\r\n                          : \"None\"}\r\n                      </b>\r\n                    </td>\r\n                    <td></td>\r\n                  </tr>\t\t\t\t  \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className={styles.container_modal_modalFooter}>\r\n          <Button onClick={onClose} size=\"medium\" color=\"blue\">\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport {\r\n  calculateProduction,\r\n  calculateSingleProduction,\r\n  calculateUpgradeCost,\r\n  calculateUpgradeTime,\r\n};\r\n\r\nexport default ViewNftDetailsModal;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"whiteUnderlineHover\":\"styles_whiteUnderlineHover__5Sujc\",\"orangeUnderlineHover\":\"styles_orangeUnderlineHover__TpQoR\",\"container_mainInfo_description\":\"styles_container_mainInfo_description__q0FXj\",\"blueUnderlineHover\":\"styles_blueUnderlineHover__YOj8h\",\"divHoverEffect\":\"styles_divHoverEffect__yKvV-\",\"container\":\"styles_container__922Gi\",\"container_mainInfo\":\"styles_container_mainInfo__b15E2\",\"container_mainInfo_nftName\":\"styles_container_mainInfo_nftName__LVWZ5\"};","import React, { useRef, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport Button from \"../../Button/Button\";\r\nimport Checkbox from \"../../Checkbox/Checkbox\";\r\nimport ViewNftDetailsModal from \"../../Modal/ViewNftDetailsModal/ViewNftDetailsModal\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nimport {\r\n  calculateProduction,\r\n  calculateSingleProduction,\r\n  calculateUpgradeCost,\r\n  calculateUpgradeTime,\r\n} from \"../../Modal/ViewNftDetailsModal/ViewNftDetailsModal\";\r\n\r\nconst Nft = ({\r\n  nft,\r\n  buttonLoader,\r\n  image,\r\n  functional,\r\n  mineLevel,\r\n  stakeMinesIntoSlot,\r\n  stakeSlot,\r\n  unstakeSlot,\r\n  burnNft,\r\n  onSelect,\r\n  selected,\r\n  stakedSlot,\r\n  fullSlot,\r\n}) => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const scrollRef = useRef(null);\r\n\r\n  const cardTransition = {\r\n    type: \"spring\",\r\n    ease: \"easeInOut\",\r\n    damping: 30,\r\n  };\r\n  const Variants = {\r\n    initial: { opacity: 0 },\r\n    whileInView: { opacity: 1 },\r\n  };\r\n\r\n  const openDescriptionModal = () => {\r\n    setModalOpen(true);\r\n  };\r\n  const closeDescriptionModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n  const currentLevel = mineLevel;\r\n  const nextLevel = mineLevel + 1;\r\n\r\n  const shouldShowCheckbox =\r\n    nft?.data.name === \"Chaos X-18 Mine Aurum\" ||\r\n    nft?.data.name === \"ChaosX-18 Mine Celium\" ||\r\n    (nft?.data.name === \"ChaosX-18 Building Slot\" && stakedSlot === false);\r\n\t\r\n  //console.log(\"mineLevel:\", mineLevel);\r\n  \r\n  return (\r\n    <>\r\n      {nft && (\r\n        <motion.div\r\n          className={styles.container}\r\n          transition={cardTransition}\r\n          viewport={{ root: scrollRef, once: true }}\r\n          variants={Variants}\r\n          initial=\"initial\"\r\n          whileInView=\"whileInView\"\r\n        >\r\n          {functional && shouldShowCheckbox && (\r\n            <Checkbox checked={selected} onChange={onSelect} />\r\n          )}\r\n          <img\r\n            rel=\"preload\"\r\n            src={image ? image : `https://ipfs.io/ipfs/${nft?.data.img}`}\r\n            alt={nft?.data.name + \"'s image\"}\r\n          />\r\n          <div className={styles.container_mainInfo}>\r\n            <h2 className={styles.container_mainInfo_nftName}>\r\n              {nft?.data.name === \"Chaos X-18 Mine Aurum\"\r\n                ? \"ChaosX-18 Mine Aurum\"\r\n                : nft?.data.name}\r\n            </h2>\r\n            <span\r\n              className={styles.container_mainInfo_description}\r\n              onClick={openDescriptionModal}\r\n            >\r\n              Details\r\n            </span>\r\n            {functional && (\r\n              <>\r\n                {nft?.data.name === \"ChaosX-18 Building Slot\" &&\r\n                stakedSlot === false ? (\r\n                  <Button\r\n                    onClick={() => stakeSlot(nft)}\r\n                    loader={buttonLoader}\r\n                    size=\"auto\"\r\n                    color=\"blue\"\r\n                  >\r\n                    Stake Slot\r\n                  </Button>\r\n                ) : nft?.data.name === \"ChaosX-18 Building Slot\" &&\r\n                  fullSlot === false &&\r\n                  stakedSlot === true ? (\r\n                  <>\r\n                    <Button\r\n                      onClick={() => stakeMinesIntoSlot(nft)}\r\n                      loader={buttonLoader}\r\n                      size=\"auto\"\r\n                      color=\"blue\"\r\n                    >\r\n                      Stake Mines\r\n                    </Button>\r\n                  </>\r\n                ) : nft?.data.name === \"ChaosX-18 Building Slot\" &&\r\n                  fullSlot === true &&\r\n                  stakedSlot === true ? (\r\n                  <>\r\n                    <Button\r\n                      onClick={() => unstakeSlot(nft)}\r\n                      loader={buttonLoader}\r\n                      size=\"auto\"\r\n                      color=\"blue\"\r\n                    >\r\n                      Unstake Slot\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {nft?.data.name === \"Teleport to ChaosX-18\" && (\r\n                  <Button\r\n                    onClick={() => burnNft(nft)}\r\n                    loader={buttonLoader}\r\n                    size=\"auto\"\r\n                    color=\"blue\"\r\n                  >\r\n                    Burn\r\n                  </Button>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </motion.div>\r\n      )}\r\n      {modalOpen && (\r\n        <ViewNftDetailsModal\r\n\t\t  onClose={closeDescriptionModal}\r\n\t\t  description={\r\n\t\t    nft?.data.description || nft?.data.descr || nft?.data.desc\r\n\t\t  }\r\n\t\t  effect={nft?.data.name ? calculateProduction(mineLevel, nft?.data.name) : \"No effect\"}\r\n          currentLevel={currentLevel} // Passa il livello corrente\r\n          nextLevel={nextLevel} // Passa il livello successivo\r\n\t\t  nftName={nft?.data.name}\r\n        />\r\n\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Nft;\r\n"],"names":["_ref","checked","onChange","_jsxs","className","styles","children","_jsx","type","calculateProduction","mineLevel","nftName","currentProduction","calculateSingleProduction","nextProduction","currentCost","calculateUpgradeCost","nextCost","currentUpgradeTime","calculateUpgradeTime","nextUpgradeTime","parseFloat","Math","pow","toFixed","aurumCost","celiumCost","upgradeNFT","totalSeconds","floor","hours","minutes","seconds","concat","onClose","description","effect","currentLevel","nextLevel","modalRef","useRef","_useState","useState","_useState2","_slicedToArray","timeRemaining","setTimeRemaining","useEffect","Date","mine","lastUpgrade","toLocaleString","neededTime","level","timer","setInterval","prevTimeRemaining","updatedTimeRemaining","clearInterval","setTimeout","window","location","reload","startUpgradeTimer","motion","div","transition","ease","damping","initial","opacity","animate","ref","onClick","e","stopPropagation","rel","src","closeIcon","alt","time","formatTimeRemaining","Button","size","color","nft","buttonLoader","image","functional","stakeMinesIntoSlot","stakeSlot","unstakeSlot","burnNft","onSelect","selected","stakedSlot","fullSlot","modalOpen","setModalOpen","scrollRef","shouldShowCheckbox","data","name","_Fragment","viewport","root","once","variants","whileInView","Checkbox","img","loader","ViewNftDetailsModal","descr","desc"],"sourceRoot":""}