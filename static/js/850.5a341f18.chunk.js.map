{"version":3,"file":"static/js/850.5a341f18.chunk.js","mappings":"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","sources":["webpack://chaosx-18/./src/components/Mining/styles.module.scss?3d4e","components/Mining/Mining.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"whiteUnderlineHover\":\"styles_whiteUnderlineHover__QE1ke\",\"orangeUnderlineHover\":\"styles_orangeUnderlineHover__EVvLz\",\"blueUnderlineHover\":\"styles_blueUnderlineHover__1-xHu\",\"divHoverEffect\":\"styles_divHoverEffect__gySOJ\",\"container\":\"styles_container__ikqpf\",\"container_miningInfo\":\"styles_container_miningInfo__s-DLW\",\"container_miningInfo_aurumBoosters\":\"styles_container_miningInfo_aurumBoosters__4onUL\",\"container_miningInfo_celiumBoosters\":\"styles_container_miningInfo_celiumBoosters__WZJJq\",\"container_miningInfo_timeInfo\":\"styles_container_miningInfo_timeInfo__Q5TNs\",\"container_miningInfo_mainInfo\":\"styles_container_miningInfo_mainInfo__C+BUD\",\"container_buttonWrapper\":\"styles_container_buttonWrapper__QmY+K\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { motion } from \"framer-motion\";\r\nimport { toast } from \"react-toastify\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { User } from \"../../UserService\";\r\nimport {\r\n  getMyNfts,\r\n  getMyWorkingNfts,\r\n} from \"../../GlobalState/NftsSlice/nftsSlice\";\r\nimport Button from \"../Button/Button\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nimport mineAurum from \"../../assets/images/nfts/Mine-Aurum.webp\";\r\nimport mineCelium from \"../../assets/images/nfts/Mine-Celium.webp\";\r\nimport buildingSlot from \"../../assets/images/nfts/Building-Slot.webp\";\r\nimport levelUpToken from \"../../assets/images/nfts/Level-Up-Token.webp\";\r\nimport teleportToChaos from \"../../assets/images/nfts/Teleport.webp\";\r\n\r\nconst MyNftCard = React.lazy(() =>\r\n  import(\"../../components/Nft/MyNftCard/MyNftCard\")\r\n);\r\n\r\nconst images = {\r\n  \"Chaos X-18 Mine Aurum\": mineAurum,\r\n  \"ChaosX-18 Mine Celium\": mineCelium,\r\n  \"ChaosX-18 Building Slot\": buildingSlot,\r\n  \"ChaosX-18 Level Up token\": levelUpToken,\r\n  \"Teleport to ChaosX-18\": teleportToChaos,\r\n};\r\n\r\nconst Mining = ({ mine }) => {\r\n  const scrollRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const [buttonLoader, setButtonLoader] = useState(null);\r\n  const { waxConnected, anchorConnected } = useSelector((state) => state.user);\r\n  const { myWorkingNfts, myNfts } = useSelector((state) => state.nfts);\r\n  const miningTransition = {\r\n    type: \"spring\",\r\n    ease: \"easeInOut\",\r\n    damping: 35,\r\n    delay: 0.5,\r\n  };\r\n  const Variants = {\r\n    initial: { opacity: 0 },\r\n    whileInView: { opacity: 1 },\r\n  };\r\n\r\n  // mine\r\n  const mineWithAnchor = () => {\r\n    if (buttonLoader) return;\r\n    const currentUTCTimestamp = Date.now();\r\n    const lastUpgradeDate = new Date(\r\n      mine.unstake_time\r\n        ? mine.unstake_time.toString() !== \"1970-01-01T00:00:00\"\r\n        : mine.lastUpgrade\r\n    );\r\n    lastUpgradeDate.setHours(lastUpgradeDate.getHours() + 24);\r\n    const timeRemainingMs = lastUpgradeDate - currentUTCTimestamp;\r\n    let hoursRemaining = Math.ceil(timeRemainingMs / 3600000);\r\n    const timeZoneOffsetHours = -(new Date().getTimezoneOffset() / 60);\r\n    hoursRemaining += timeZoneOffsetHours;\r\n\r\n    setButtonLoader(\"Mine\");\r\n    User.anchorSession\r\n      ?.transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"xcryptochaos\",\r\n              name: \"minetoken\",\r\n              authorization: [\r\n                {\r\n                  actor: User.anchorSession?.auth?.actor.toString(),\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                player: User.anchorSession?.auth?.actor.toString(),\r\n                mineId: mine?.id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\"Mining started successfully\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(`You can mine after ${hoursRemaining} hours`);\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const mineWithWax = () => {\r\n    if (buttonLoader) return;\r\n    const currentUTCTimestamp = Date.now();\r\n    const lastUpgradeDate = new Date(\r\n      mine.unstake_time\r\n        ? mine.unstake_time.toString() !== \"1970-01-01T00:00:00\"\r\n        : mine.lastUpgrade\r\n    );\r\n    lastUpgradeDate.setHours(lastUpgradeDate.getHours() + 24);\r\n    const timeRemainingMs = lastUpgradeDate - currentUTCTimestamp;\r\n    let hoursRemaining = Math.ceil(timeRemainingMs / 3600000);\r\n    const timeZoneOffsetHours = -(new Date().getTimezoneOffset() / 60);\r\n    hoursRemaining += timeZoneOffsetHours;\r\n\r\n    setButtonLoader(\"Mine\");\r\n    User.wax.api\r\n      .transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"xcryptochaos\",\r\n              name: \"minetoken\",\r\n              authorization: [\r\n                {\r\n                  actor: User.wax?.userAccount,\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                player: User.wax?.userAccount,\r\n                mineId: mine?.id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(`Mining started successfully`);\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(`You can mine after ${hoursRemaining} hours`);\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const mineNft = () => {\r\n    if (anchorConnected) {\r\n      mineWithAnchor();\r\n    } else if (waxConnected) {\r\n      mineWithWax();\r\n    }\r\n  };\r\n\r\n  // upgrade\r\n  const upgradeWithAnchor = (nft, levelUp) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(nft.asset_id);\r\n    User.anchorSession\r\n      ?.transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"atomicassets\",\r\n              name: \"transfer\",\r\n              authorization: [\r\n                {\r\n                  actor: User.anchorSession?.auth?.actor.toString(),\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                from: User.anchorSession?.auth?.actor.toString(),\r\n                to: \"xcryptochaos\",\r\n                asset_ids: [levelUp.asset_id],\r\n                memo: \"burn@level@\" + nft.asset_id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\r\n          \"NFT successfully upgraded, you can mine it after 24 hours\"\r\n        );\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"NFT doesn't upgraded, try again\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const upgradeWithWaxCloud = (nft, levelUp) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(nft.asset_id);\r\n    User.wax.api\r\n      .transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"atomicassets\",\r\n              name: \"transfer\",\r\n              authorization: [\r\n                {\r\n                  actor: User.wax?.userAccount,\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                from: User.wax?.userAccount,\r\n                to: \"xcryptochaos\",\r\n                asset_ids: [levelUp.asset_id],\r\n                memo: \"burn@level@\" + nft.asset_id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\r\n          \"NFT successfully upgraded, you can mine it after 24 hours\"\r\n        );\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"NFT doesn't upgraded, try again\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const upgradeNft = (nft) => {\r\n    const levelUp = myNfts.filter(\r\n      (nft) => nft.name === \"ChaosX-18 Level Up token\"\r\n    );\r\n    if (levelUp[0]) {\r\n      if (anchorConnected) {\r\n        upgradeWithAnchor(nft, levelUp[0]);\r\n      } else if (waxConnected) {\r\n        upgradeWithWaxCloud(nft, levelUp[0]);\r\n      }\r\n    } else {\r\n      toast.error(\"To upgrade your mine purchase ChaosX-18 Level Up token\");\r\n      return;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mine) {\r\n      setTimeout(() => {\r\n        dispatch(getMyWorkingNfts(mine.asset_id));\r\n      }, 1000);\r\n    }\r\n    dispatch(getMyNfts());\r\n  }, [dispatch, mine]);\r\n\r\n  return (\r\n    <motion.div\r\n      viewport={{ root: scrollRef, once: true }}\r\n      transition={miningTransition}\r\n      variants={Variants}\r\n      initial=\"initial\"\r\n      whileInView=\"whileInView\"\r\n      className={styles.container}\r\n    >\r\n      {myWorkingNfts && (\r\n        <React.Suspense fallback={<Loader size={250} />} key={mine.asset_id}>\r\n          <MyNftCard\r\n            key={mine?.asset_id}\r\n            nft={myWorkingNfts[mine?.asset_id]}\r\n            image={images[myWorkingNfts[mine?.asset_id]?.name]}\r\n            functional={false}\r\n          />\r\n        </React.Suspense>\r\n      )}\r\n      {mine && (\r\n        <div className={styles.container_miningInfo}>\r\n          <div className={styles.container_miningInfo_aurumBoosters}>\r\n            <p>\r\n              <b>First booster: </b>\r\n              {new Date(mine.bstrOne).toLocaleString() ===\r\n              \"1/1/1970, 12:00:00 AM\"\r\n                ? \"None\"\r\n                : new Date(mine.bstrOne).toLocaleString()}\r\n            </p>\r\n            <p>\r\n              <b>Second booster: </b>\r\n              {new Date(mine.bstrTwo).toLocaleString() ===\r\n              \"1/1/1970, 12:00:00 AM\"\r\n                ? \"None\"\r\n                : new Date(mine.bstrTwo).toLocaleString()}\r\n            </p>\r\n          </div>\r\n          <div className={styles.container_miningInfo_timeInfo}>\r\n            <p>\r\n              <b>Last time mined: </b>\r\n              {new Date(mine.lastMined).toLocaleString() ===\r\n              \"1/1/1970, 12:00:00 AM\"\r\n                ? \"None\"\r\n                : new Date(mine.lastMined).toLocaleString()}\r\n            </p>\r\n            <p>\r\n              <b>Last time upgrade: </b>\r\n              {new Date(mine.lastUpgrade).toLocaleString() ===\r\n              \"1/1/1970, 12:00:00 AM\"\r\n                ? \"None\"\r\n                : new Date(mine.lastUpgrade).toLocaleString()}\r\n            </p>\r\n            <p>\r\n              <b>Unstake time: </b>\r\n              {new Date(mine.unstake_time).toLocaleString() ===\r\n              \"1/1/1970, 12:00:00 AM\"\r\n                ? \"None\"\r\n                : new Date(mine.unstake_time).toLocaleString()}\r\n            </p>\r\n          </div>\r\n          <div className={styles.container_miningInfo_mainInfo}>\r\n            <p>\r\n              <b>Mine level: </b>\r\n              {mine.level}\r\n            </p>\r\n            <p>\r\n              <b>Mine locked: </b>\r\n              {mine.is_locked === 0 ? \"No\" : \"Yes\"}\r\n            </p>\r\n            <p>\r\n              <b>Mine staked: </b>\r\n              {mine.is_staked === 0 ? \"No\" : \"Yes\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className={styles.container_buttonWrapper}>\r\n        <Button onClick={mineNft} loader={buttonLoader} size=\"fit\" color=\"blue\">\r\n          Mine\r\n        </Button>\r\n        <Button\r\n          onClick={() => upgradeNft(myWorkingNfts[mine?.asset_id])}\r\n          loader={buttonLoader}\r\n          size=\"fit\"\r\n          color=\"blue\"\r\n        >\r\n          Upgrade\r\n        </Button>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Mining;\r\n"],"names":["MyNftCard","React","images","mineAurum","mineCelium","buildingSlot","levelUpToken","teleportToChaos","_ref","_myWorkingNfts$mine$a","mine","scrollRef","useRef","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","buttonLoader","setButtonLoader","_useSelector","useSelector","state","user","waxConnected","anchorConnected","_useSelector2","nfts","myWorkingNfts","myNfts","upgradeNft","nft","levelUp","filter","name","_User$anchorSession4","_User$anchorSession5","_User$anchorSession5$","_User$anchorSession6","_User$anchorSession6$","asset_id","User","anchorSession","transact","actions","account","authorization","actor","auth","toString","permission","data","from","to","asset_ids","memo","blocksBehind","expireSeconds","then","_","toast","success","catch","error","upgradeWithAnchor","_User$wax3","_User$wax4","wax","api","userAccount","upgradeWithWaxCloud","useEffect","setTimeout","getMyWorkingNfts","getMyNfts","_jsxs","motion","div","viewport","root","once","transition","type","ease","damping","delay","variants","initial","opacity","whileInView","className","styles","children","_jsx","fallback","Loader","size","image","functional","Date","bstrOne","toLocaleString","bstrTwo","lastMined","lastUpgrade","unstake_time","level","is_locked","is_staked","Button","onClick","_User$anchorSession","_User$anchorSession2","_User$anchorSession2$","_User$anchorSession3","_User$anchorSession3$","currentUTCTimestamp","now","lastUpgradeDate","setHours","getHours","timeRemainingMs","hoursRemaining","Math","ceil","timeZoneOffsetHours","getTimezoneOffset","player","mineId","id","concat","mineWithAnchor","_User$wax","_User$wax2","mineWithWax","loader","color"],"sourceRoot":""}