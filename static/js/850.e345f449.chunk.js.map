{"version":3,"file":"static/js/850.e345f449.chunk.js","mappings":"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","sources":["webpack://chaosx-18/./src/components/Mining/styles.module.scss?3d4e","components/Mining/Mining.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"whiteUnderlineHover\":\"styles_whiteUnderlineHover__RKk8i\",\"orangeUnderlineHover\":\"styles_orangeUnderlineHover__3Br3a\",\"blueUnderlineHover\":\"styles_blueUnderlineHover__NFbjJ\",\"divHoverEffect\":\"styles_divHoverEffect__tuwxX\",\"container\":\"styles_container__HW8Lb\",\"container_miningInfo\":\"styles_container_miningInfo__ISrps\",\"container_miningInfo_aurumBoosters\":\"styles_container_miningInfo_aurumBoosters__EY-dL\",\"container_miningInfo_celiumBoosters\":\"styles_container_miningInfo_celiumBoosters__TTPLf\",\"container_miningInfo_timeInfo\":\"styles_container_miningInfo_timeInfo__51cuT\",\"container_miningInfo_mainInfo\":\"styles_container_miningInfo_mainInfo__hf1vM\",\"container_buttonWrapper\":\"styles_container_buttonWrapper__ooiE-\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { motion } from \"framer-motion\";\r\nimport { toast } from \"react-toastify\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { User } from \"../../UserService\";\r\nimport {\r\n  getMyNfts,\r\n  getMyWorkingNfts,\r\n} from \"../../GlobalState/NftsSlice/nftsSlice\";\r\nimport Button from \"../Button/Button\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nimport mineAurum from \"../../assets/images/nfts/Mine-Aurum.webp\";\r\nimport mineCelium from \"../../assets/images/nfts/Mine-Celium.webp\";\r\nimport buildingSlot from \"../../assets/images/nfts/Building-Slot.webp\";\r\nimport levelUpToken from \"../../assets/images/nfts/Level-Up-Token.webp\";\r\nimport teleportToChaos from \"../../assets/images/nfts/Teleport.webp\";\r\n\r\nconst MyNftCard = React.lazy(() =>\r\n  import(\"../../components/Nft/MyNftCard/MyNftCard\")\r\n);\r\n\r\nconst images = {\r\n  \"Chaos X-18 Mine Aurum\": mineAurum,\r\n  \"ChaosX-18 Mine Celium\": mineCelium,\r\n  \"ChaosX-18 Building Slot\": buildingSlot,\r\n  \"ChaosX-18 Level Up token\": levelUpToken,\r\n  \"Teleport to ChaosX-18\": teleportToChaos,\r\n};\r\n\r\nconst targetUrl = \"https://cors-anywhere.herokuapp.com/https://wax.pink.gg/v1/chain/get_block_header_state\";\r\n\r\nconst Mining = ({ mine, allMines }) => {\r\n  console.log(\"AllMines importato da profile\", allMines);\r\n  const scrollRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const [buttonLoader, setButtonLoader] = useState(null);\r\n  const { waxConnected, anchorConnected } = useSelector((state) => state.user);\r\n  const { myWorkingNfts, myNfts } = useSelector((state) => state.nfts);\r\n  const miningTransition = {\r\n    type: \"spring\",\r\n    ease: \"easeInOut\",\r\n    damping: 35,\r\n    delay: 0.5,\r\n  };\r\n  const Variants = {\r\n    initial: { opacity: 0 },\r\n    whileInView: { opacity: 1 },\r\n  };\r\n\r\n  const mineAll = () => {\r\n    if (buttonLoader || !Array.isArray(allMines)) {\r\n      console.log(\"Errore: allMines non è un array o è indefinito.\", allMines);\r\n      return;\r\n    }\r\n\r\n    for (const mine of allMines) {\r\n      console.log(\"Mine corrente:\", mine);\r\n      if (anchorConnected) {\r\n        mineWithAnchor(mine);\r\n      } else if (waxConnected) {\r\n        mineWithWax(mine);\r\n      }\r\n    }\r\n  };\r\n\r\n  const mineWithAnchor = (mine) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(\"Mine\");\r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        actions: [\r\n          {\r\n            account: \"xcryptochaos\",\r\n            name: \"minetoken\",\r\n            authorization: [\r\n              {\r\n                actor: User.anchorSession?.auth?.actor.toString(),\r\n                permission: \"active\",\r\n              },\r\n            ],\r\n            data: {\r\n              player: User.anchorSession?.auth?.actor.toString(),\r\n              mineId: mine?.id,\r\n            },\r\n          },\r\n        ],\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        toast.success(\"Resources collecting has successfully started\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"You can't claim now, upgrade in progress\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const mineWithWax = (mine) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(\"Mine\");\r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        actions: [\r\n          {\r\n            account: \"xcryptochaos\",\r\n            name: \"minetoken\",\r\n            authorization: [\r\n              {\r\n                actor: User.wax?.userAccount,\r\n                permission: \"active\",\r\n              },\r\n            ],\r\n            data: {\r\n              player: User.wax?.userAccount,\r\n              mineId: mine?.id,\r\n            },\r\n          },\r\n        ],\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        toast.success(\"Resources collecting has successfully started\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"You can't claim now, upgrade in progress\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const mineNft = () => {\r\n    if (anchorConnected) {\r\n      mineWithAnchor(mine);\r\n    } else if (waxConnected) {\r\n      mineWithWax(mine);\r\n    }\r\n  };\r\n\r\n  const upgradeWithAnchor = (nft, levelUp) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(nft.asset_id);\r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        actions: [\r\n          {\r\n            account: \"atomicassets\",\r\n            name: \"transfer\",\r\n            authorization: [\r\n              {\r\n                actor: User.anchorSession?.auth?.actor.toString(),\r\n                permission: \"active\",\r\n              },\r\n            ],\r\n            data: {\r\n              from: User.anchorSession?.auth?.actor.toString(),\r\n              to: \"xcryptochaos\",\r\n              asset_ids: [levelUp.asset_id],\r\n              memo: \"burn@level@\" + nft.asset_id,\r\n            },\r\n          },\r\n        ],\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        toast.success(\"Mine upgrading started, you can mine it when it will be finished\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Mine doesn't upgraded, try again after one minute\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const upgradeWithWaxCloud = (nft, levelUp) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(nft.asset_id);\r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        actions: [\r\n          {\r\n            account: \"atomicassets\",\r\n            name: \"transfer\",\r\n            authorization: [\r\n              {\r\n                actor: User.wax?.userAccount,\r\n                permission: \"active\",\r\n              },\r\n            ],\r\n            data: {\r\n              from: User.wax?.userAccount,\r\n              to: \"xcryptochaos\",\r\n              asset_ids: [levelUp.asset_id],\r\n              memo: \"burn@level@\" + nft.asset_id,\r\n            },\r\n          },\r\n        ],\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        toast.success(\"Mine upgrading started, you can mine it when it will be finished\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Mine doesn't upgraded, try again after one minute\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const upgradeNft = (nft) => {\r\n    const levelUp = myNfts.filter(\r\n      (nft) => nft.name === \"ChaosX-18 Level Up token\"\r\n    );\r\n    if (levelUp[0]) {\r\n      if (anchorConnected) {\r\n        upgradeWithAnchor(nft, levelUp[0]);\r\n      } else if (waxConnected) {\r\n        upgradeWithWaxCloud(nft, levelUp[0]);\r\n      }\r\n    } else {\r\n      toast.error(\"To upgrade your mine purchase ChaosX-18 Level Up token\");\r\n      return;\r\n    }\r\n  }; \r\n\r\n  useEffect(() => {\r\n    if (mine) {\r\n      setTimeout(() => {\r\n        dispatch(getMyWorkingNfts(mine.asset_id));\r\n      }, 1000);\r\n    }\r\n    dispatch(getMyNfts());\r\n  }, [dispatch, mine]);\r\n\r\n  return (\r\n    <motion.div\r\n      viewport={{ root: scrollRef, once: true }}\r\n      transition={miningTransition}\r\n      variants={Variants}\r\n      initial=\"initial\"\r\n      whileInView=\"whileInView\"\r\n      className={styles.container}\r\n    >\r\n      {myWorkingNfts && (\r\n        <React.Suspense fallback={<Loader size={250} />} key={mine.asset_id}>\r\n          <MyNftCard\r\n            key={mine?.asset_id}\r\n            nft={myWorkingNfts[mine?.asset_id]}\r\n            image={images[myWorkingNfts[mine?.asset_id]?.name]}\r\n            functional={false}\r\n\t\t\tmineLevel={mine.level}\r\n\t\t\tmineLastUpgrade = {mine.lastUpgrade}\r\n          />\r\n        </React.Suspense>\r\n      )}\r\n      {mine && (\r\n        <div className={styles.container_miningInfo}>\r\n          <div className={styles.container_miningInfo_aurumBoosters}>\r\n            <p>\r\n              <b>First booster: </b>\r\n              {new Date(mine.bstrOne).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"Not yet available\"\r\n                : new Date(mine.bstrOne).toLocaleString()}\r\n            </p>\r\n            <p>\r\n              <b>Second booster: </b>\r\n              {new Date(mine.bstrTwo).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"Not yet available\"\r\n                : new Date(mine.bstrTwo).toLocaleString()}\r\n            </p>\r\n          </div>\r\n          <div className={styles.container_miningInfo_timeInfo}>\r\n            <p>\r\n              <b>Last time claimed: </b>\r\n              {new Date(mine.lastMined).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"None\"\r\n                : new Date(mine.lastMined).toLocaleString()}\r\n            </p>\r\n            <p>\r\n\t\t\t  <b>Upgrade in progress: </b>\r\n\r\n\t\t\t  {new Date(mine.lastUpgrade).toLocaleString() === \"1.1.1970, 00:00:00\"\r\n\t\t\t\t? \"No\"\r\n\t\t\t\t: (() => {\r\n\t\t\t\t  const currentMine = mine.level - 1;\t\r\n\t\t\t\t  const totalMilliseconds = Math.floor(((11 * Math.pow(1.55, currentMine))*1000)+7200000);\r\n\t\t\t\t  //console.log(\"totalMilliseconds:\", totalMilliseconds);\r\n\t\t\t\t  const lastUpgradeDate = new Date(mine.lastUpgrade);\r\n\t\t\t\t  //console.log(\"Upgrade in progress converted in TS, lastUpgradeDate:\", lastUpgradeDate.getTime());\r\n\t\t\t\t  lastUpgradeDate.setTime(lastUpgradeDate.getTime() + totalMilliseconds);\r\n\t\t\t\t  //console.log(\"Upgrade + difference before condition, lastUpgradeDate:\", lastUpgradeDate.getTime());\r\n\t\t\t\t  const currentTime = new Date();\r\n\t\t\t\t  if (lastUpgradeDate.getTime() <= currentTime.getTime()){\r\n\t\t\t\t\t  //console.log(\"Upgrade in progress finished, lastUpgradeDate:\", lastUpgradeDate.getTime());\r\n\t\t\t\t\t  //console.log(\"Upgrade in progress finished, currentTime:\", currentTime.getTime());\r\n\t\t\t\t\t  return \"No\";\r\n\t\t\t\t  }\t\r\n\t\t\t\t  //console.log(\"Upgrade in progress Yes, lastUpgradeDate:\", lastUpgradeDate.getTime());\r\n\t\t\t\t  //console.log(\"Upgrade in progress Yes, currentTime:\", currentTime.getTime());\r\n\t\t\t\t  //console.log(\"Upgrade in progress Yes, lastUpgradeDate:\", lastUpgradeDate.toLocaleString(), lastUpgradeDate.getTime());\r\n\t\t\t\t  const timeZoneInternational = new Date(lastUpgradeDate.getTime() - 7200000);\r\n\t\t\t\t  //console.log(\"Upgrade in progress :\", timeZoneInternational.toLocaleString(), timeZoneInternational);\r\n\t\t\t\t  return timeZoneInternational.toLocaleString();\r\n\t\t\t\t})()}\r\n\t\t\t</p>\r\n\t\t\t\r\n          </div>\r\n          <div className={styles.container_miningInfo_mainInfo}>\r\n            <p>\r\n              <b>Miner level: </b>\r\n              {mine.level}\r\n            </p>\r\n            {/*<p>\r\n              //<b>Miner locked: </b>\r\n              //{mine.is_locked === 0 ? \"No\" : \"Yes\"}\r\n            //</p>\r\n            //<p>\r\n              //<b>Miner staked: </b>\r\n              //{mine.is_staked === 0 ? \"No\" : \"Yes\"}\r\n            //</p>*/}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className={styles.container_buttonWrapper}>\r\n\t    <Button onClick={mineAll} loader={buttonLoader} size=\"fit\" color=\"blue\">\r\n          Claim from All Miners\r\n        </Button>\r\n\r\n        <Button onClick={mineNft} loader={buttonLoader} size=\"fit\" color=\"blue\">\r\n          Claim now\r\n        </Button>\r\n        <Button\r\n          onClick={() => upgradeNft(myWorkingNfts[mine?.asset_id])}\r\n          loader={buttonLoader}\r\n          size=\"fit\"\r\n          color=\"blue\"\r\n        >\r\n          Upgrade now\r\n        </Button>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Mining;\r\n"],"names":["MyNftCard","React","images","mineAurum","mineCelium","buildingSlot","levelUpToken","teleportToChaos","targetUrl","_ref","_myWorkingNfts$mine$a","mine","allMines","console","log","scrollRef","useRef","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","buttonLoader","setButtonLoader","_useSelector","useSelector","state","user","waxConnected","anchorConnected","_useSelector2","nfts","myWorkingNfts","myNfts","mineWithAnchor","_User$anchorSession","_User$anchorSession$a","_User$anchorSession2","_User$anchorSession2$","fetch","method","headers","body","JSON","stringify","actions","account","name","authorization","actor","User","anchorSession","auth","toString","permission","data","player","mineId","id","then","response","json","toast","success","catch","error","mineWithWax","_User$wax","_User$wax2","wax","userAccount","upgradeNft","nft","levelUp","filter","_User$anchorSession3","_User$anchorSession3$","_User$anchorSession4","_User$anchorSession4$","asset_id","from","to","asset_ids","memo","upgradeWithAnchor","_User$wax3","_User$wax4","upgradeWithWaxCloud","useEffect","setTimeout","getMyWorkingNfts","getMyNfts","_jsxs","motion","div","viewport","root","once","transition","type","ease","damping","delay","variants","initial","opacity","whileInView","className","styles","children","_jsx","fallback","Loader","size","image","functional","mineLevel","level","mineLastUpgrade","lastUpgrade","Date","bstrOne","toLocaleString","bstrTwo","lastMined","currentMine","totalMilliseconds","Math","floor","pow","lastUpgradeDate","setTime","getTime","currentTime","Button","onClick","Array","isArray","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","f","loader","color"],"sourceRoot":""}