{"version":3,"file":"static/js/850.8a17458a.chunk.js","mappings":"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","sources":["webpack://chaosx-18/./src/components/Mining/styles.module.scss?3d4e","components/Mining/Mining.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"whiteUnderlineHover\":\"styles_whiteUnderlineHover__RKk8i\",\"orangeUnderlineHover\":\"styles_orangeUnderlineHover__3Br3a\",\"blueUnderlineHover\":\"styles_blueUnderlineHover__NFbjJ\",\"divHoverEffect\":\"styles_divHoverEffect__tuwxX\",\"container\":\"styles_container__HW8Lb\",\"container_miningInfo\":\"styles_container_miningInfo__ISrps\",\"container_miningInfo_aurumBoosters\":\"styles_container_miningInfo_aurumBoosters__EY-dL\",\"container_miningInfo_celiumBoosters\":\"styles_container_miningInfo_celiumBoosters__TTPLf\",\"container_miningInfo_timeInfo\":\"styles_container_miningInfo_timeInfo__51cuT\",\"container_miningInfo_mainInfo\":\"styles_container_miningInfo_mainInfo__hf1vM\",\"container_buttonWrapper\":\"styles_container_buttonWrapper__ooiE-\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { motion } from \"framer-motion\";\r\nimport { toast } from \"react-toastify\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { User } from \"../../UserService\";\r\nimport {\r\n  getMyNfts,\r\n  getMyWorkingNfts,\r\n} from \"../../GlobalState/NftsSlice/nftsSlice\";\r\nimport Button from \"../Button/Button\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nimport mineAurum from \"../../assets/images/nfts/Mine-Aurum.webp\";\r\nimport mineCelium from \"../../assets/images/nfts/Mine-Celium.webp\";\r\nimport buildingSlot from \"../../assets/images/nfts/Building-Slot.webp\";\r\nimport levelUpToken from \"../../assets/images/nfts/Level-Up-Token.webp\";\r\nimport teleportToChaos from \"../../assets/images/nfts/Teleport.webp\";\r\n\r\nconst MyNftCard = React.lazy(() =>\r\n  import(\"../../components/Nft/MyNftCard/MyNftCard\")\r\n);\r\n\r\nconst images = {\r\n  \"Chaos X-18 Mine Aurum\": mineAurum,\r\n  \"ChaosX-18 Mine Celium\": mineCelium,\r\n  \"ChaosX-18 Building Slot\": buildingSlot,\r\n  \"ChaosX-18 Level Up token\": levelUpToken,\r\n  \"Teleport to ChaosX-18\": teleportToChaos,\r\n};\r\n\r\n//const targetUrl = \"https://cors-anywhere.herokuapp.com/https://wax.pink.gg/v1/chain/get_block_header_state\"; //CORS\r\n\r\nconst Mining = ({ mine, allMines }) => {\r\n  //console.log(\"AllMines importato da profile\", allMines);\r\n  const scrollRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const [buttonLoader, setButtonLoader] = useState(null);\r\n  const { waxConnected, anchorConnected } = useSelector((state) => state.user);\r\n  const { myWorkingNfts, myNfts } = useSelector((state) => state.nfts);\r\n  const miningTransition = {\r\n    type: \"spring\",\r\n    ease: \"easeInOut\",\r\n    damping: 35,\r\n    delay: 0.5,\r\n  };\r\n  const Variants = {\r\n    initial: { opacity: 0 },\r\n    whileInView: { opacity: 1 },\r\n  };\r\n// Aggiungi una funzione per raccogliere risorse da tutte le mine\r\n  const mineAll = () => {\r\n    if (buttonLoader || !Array.isArray(allMines)) {\r\n      //console.log(\"Errore: allMines non è un array o è indefinito.\", allMines);\r\n      return;\r\n    }\r\n\r\n    // Loop attraverso tutte le mine e raccogli le risorse\r\n    for (const mine of allMines) {\r\n\t  console.log(\"Mine corrente:\", mine);\r\n      if (anchorConnected) {\r\n        mineWithAnchor(mine);\r\n      } else if (waxConnected) {\r\n        mineWithWax(mine);\r\n      }\r\n    }\r\n  };\r\n\r\n  // mine\r\n  const mineWithAnchor = () => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(\"Mine\");\r\n    User.anchorSession\r\n      ?.transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"xcryptochaos\",\r\n              name: \"minetoken\",\r\n              authorization: [\r\n                {\r\n                  actor: User.anchorSession?.auth?.actor.toString(),\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                player: User.anchorSession?.auth?.actor.toString(),\r\n                mineId: mine?.id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\"Resources collecting has successfully started\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"You can't claim now, upgrade in progress\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const mineWithWax = () => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(\"Mine\");\r\n    User.wax.api\r\n      .transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"xcryptochaos\",\r\n              name: \"minetoken\",\r\n              authorization: [\r\n                {\r\n                  actor: User.wax?.userAccount,\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                player: User.wax?.userAccount,\r\n                mineId: mine?.id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\"Resources collecting has successfully started\");\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"You can't claim now, upgrade in progress\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const {mineNft} = () => {\r\n    if (anchorConnected) {\r\n      mineWithAnchor();\r\n    } else if (waxConnected) {\r\n      mineWithWax();\r\n    }\r\n  };\r\n\r\n  // upgrade\r\n  const upgradeWithAnchor = (nft, levelUp) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(nft.asset_id);\r\n    User.anchorSession\r\n      ?.transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"atomicassets\",\r\n              name: \"transfer\",\r\n              authorization: [\r\n                {\r\n                  actor: User.anchorSession?.auth?.actor.toString(),\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                from: User.anchorSession?.auth?.actor.toString(),\r\n                to: \"xcryptochaos\",\r\n                asset_ids: [levelUp.asset_id],\r\n                memo: \"burn@level@\" + nft.asset_id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\r\n          \"Mine upgrading started, you can mine it when it will be finished\"\r\n        );\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Mine doesn't upgraded, try again after one minute\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const upgradeWithWaxCloud = (nft, levelUp) => {\r\n    if (buttonLoader) return;\r\n\r\n    setButtonLoader(nft.asset_id);\r\n    User.wax.api\r\n      .transact(\r\n        {\r\n          actions: [\r\n            {\r\n              account: \"atomicassets\",\r\n              name: \"transfer\",\r\n              authorization: [\r\n                {\r\n                  actor: User.wax?.userAccount,\r\n                  permission: \"active\",\r\n                },\r\n              ],\r\n              data: {\r\n                from: User.wax?.userAccount,\r\n                to: \"xcryptochaos\",\r\n                asset_ids: [levelUp.asset_id],\r\n                memo: \"burn@level@\" + nft.asset_id,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blocksBehind: 3,\r\n          expireSeconds: 30,\r\n        }\r\n      )\r\n      .then((_) => {\r\n        toast.success(\r\n          \"Mine upgrading started, you can mine it when it will be finished\"\r\n        );\r\n        setButtonLoader(null);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Mine doesn't upgraded, try again after one minute\");\r\n        setButtonLoader(null);\r\n      });\r\n  };\r\n\r\n  const upgradeNft = (nft) => {\r\n    const levelUp = myNfts.filter(\r\n      (nft) => nft.name === \"ChaosX-18 Level Up token\"\r\n    );\r\n    if (levelUp[0]) {\r\n      if (anchorConnected) {\r\n        upgradeWithAnchor(nft, levelUp[0]);\r\n      } else if (waxConnected) {\r\n        upgradeWithWaxCloud(nft, levelUp[0]);\r\n      }\r\n    } else {\r\n      toast.error(\"To upgrade your mine purchase ChaosX-18 Level Up token\");\r\n      return;\r\n    }\r\n  }; \r\n  \r\n  useEffect(() => {\r\n    if (mine) {\r\n      setTimeout(() => {\r\n        dispatch(getMyWorkingNfts(mine.asset_id));\r\n      }, 1000);\r\n    }\r\n    dispatch(getMyNfts());\r\n  }, [dispatch, mine]);\r\n  \r\n\r\n  return (\r\n    <motion.div\r\n      viewport={{ root: scrollRef, once: true }}\r\n      transition={miningTransition}\r\n      variants={Variants}\r\n      initial=\"initial\"\r\n      whileInView=\"whileInView\"\r\n      className={styles.container}\r\n    >\r\n      {myWorkingNfts && (\r\n        <React.Suspense fallback={<Loader size={250} />} key={mine.asset_id}>\r\n          <MyNftCard\r\n            key={mine?.asset_id}\r\n            nft={myWorkingNfts[mine?.asset_id]}\r\n            image={images[myWorkingNfts[mine?.asset_id]?.name]}\r\n            functional={false}\r\n\t\t\tmineLevel={mine.level}\r\n\t\t\tmineLastUpgrade = {mine.lastUpgrade}\r\n          />\r\n        </React.Suspense>\r\n      )}\r\n      {mine && (\r\n        <div className={styles.container_miningInfo}>\r\n          <div className={styles.container_miningInfo_aurumBoosters}>\r\n            <p>\r\n              <b>First booster: </b>\r\n              {new Date(mine.bstrOne).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"Not yet available\"\r\n                : new Date(mine.bstrOne).toLocaleString()}\r\n            </p>\r\n            <p>\r\n              <b>Second booster: </b>\r\n              {new Date(mine.bstrTwo).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"Not yet available\"\r\n                : new Date(mine.bstrTwo).toLocaleString()}\r\n            </p>\r\n          </div>\r\n          <div className={styles.container_miningInfo_timeInfo}>\r\n            <p>\r\n              <b>Last time claimed: </b>\r\n              {new Date(mine.lastMined).toLocaleString() ===\r\n              \"1.1.1970, 00:00:00\"\r\n                ? \"None\"\r\n                : new Date(mine.lastMined).toLocaleString()}\r\n            </p>\r\n            <p>\r\n\t\t\t  <b>Upgrade in progress: </b>\r\n\r\n\t\t\t  {new Date(mine.lastUpgrade).toLocaleString() === \"1.1.1970, 00:00:00\"\r\n\t\t\t\t? \"No\"\r\n\t\t\t\t: (() => {\r\n\t\t\t\t  const currentMine = mine.level - 1;\t\r\n\t\t\t\t  const totalMilliseconds = Math.floor(((11 * Math.pow(1.55, currentMine))*1000)+7200000);\r\n\t\t\t\t  //console.log(\"totalMilliseconds:\", totalMilliseconds);\r\n\t\t\t\t  const lastUpgradeDate = new Date(mine.lastUpgrade);\r\n\t\t\t\t  //console.log(\"Upgrade in progress converted in TS, lastUpgradeDate:\", lastUpgradeDate.getTime());\r\n\t\t\t\t  lastUpgradeDate.setTime(lastUpgradeDate.getTime() + totalMilliseconds);\r\n\t\t\t\t  //console.log(\"Upgrade + difference before condition, lastUpgradeDate:\", lastUpgradeDate.getTime());\r\n\t\t\t\t  const currentTime = new Date();\r\n\t\t\t\t  if (lastUpgradeDate.getTime() <= currentTime.getTime()){\r\n\t\t\t\t\t  //console.log(\"Upgrade in progress finished, lastUpgradeDate:\", lastUpgradeDate.getTime());\r\n\t\t\t\t\t  //console.log(\"Upgrade in progress finished, currentTime:\", currentTime.getTime());\r\n\t\t\t\t\t  return \"No\";\r\n\t\t\t\t  }\t\r\n\t\t\t\t  //console.log(\"Upgrade in progress Yes, lastUpgradeDate:\", lastUpgradeDate.getTime());\r\n\t\t\t\t  //console.log(\"Upgrade in progress Yes, currentTime:\", currentTime.getTime());\r\n\t\t\t\t  //console.log(\"Upgrade in progress Yes, lastUpgradeDate:\", lastUpgradeDate.toLocaleString(), lastUpgradeDate.getTime());\r\n\t\t\t\t  const timeZoneInternational = new Date(lastUpgradeDate.getTime() - 7200000);\r\n\t\t\t\t  //console.log(\"Upgrade in progress :\", timeZoneInternational.toLocaleString(), timeZoneInternational);\r\n\t\t\t\t  return timeZoneInternational.toLocaleString();\r\n\t\t\t\t})()}\r\n\t\t\t</p>\r\n\t\t\t\r\n          </div>\r\n          <div className={styles.container_miningInfo_mainInfo}>\r\n            <p>\r\n              <b>Miner level: </b>\r\n              {mine.level}\r\n            </p>\r\n            {/*<p>\r\n              //<b>Miner locked: </b>\r\n              //{mine.is_locked === 0 ? \"No\" : \"Yes\"}\r\n            //</p>\r\n            //<p>\r\n              //<b>Miner staked: </b>\r\n              //{mine.is_staked === 0 ? \"No\" : \"Yes\"}\r\n            //</p>*/}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className={styles.container_buttonWrapper}>\r\n\t    {/*<Button onClick={mineAll} loader={buttonLoader} size=\"fit\" color=\"blue\">\r\n          Claim from All Miners\r\n        </Button>*/}\r\n\r\n        <Button onClick={mineNft} loader={buttonLoader} size=\"fit\" color=\"blue\">\r\n          Claim now\r\n        </Button>\r\n        <Button\r\n          onClick={() => upgradeNft(myWorkingNfts[mine?.asset_id])}\r\n          loader={buttonLoader}\r\n          size=\"fit\"\r\n          color=\"blue\"\r\n        >\r\n          Upgrade now\r\n        </Button>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Mining;\r\n"],"names":["MyNftCard","React","images","mineAurum","mineCelium","buildingSlot","levelUpToken","teleportToChaos","_ref","_myWorkingNfts$mine$a","mine","scrollRef","allMines","useRef","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","buttonLoader","setButtonLoader","_useSelector","useSelector","state","user","waxConnected","anchorConnected","_useSelector2","nfts","myWorkingNfts","myNfts","mineWithAnchor","_User$anchorSession","_User$anchorSession2","_User$anchorSession2$","_User$anchorSession3","_User$anchorSession3$","User","anchorSession","transact","actions","account","name","authorization","actor","auth","toString","permission","data","player","mineId","id","blocksBehind","expireSeconds","then","_","toast","success","catch","error","mineWithWax","_User$wax","_User$wax2","wax","api","userAccount","mineNft","upgradeNft","nft","levelUp","filter","_User$anchorSession4","_User$anchorSession5","_User$anchorSession5$","_User$anchorSession6","_User$anchorSession6$","asset_id","from","to","asset_ids","memo","upgradeWithAnchor","_User$wax3","_User$wax4","upgradeWithWaxCloud","useEffect","setTimeout","getMyWorkingNfts","getMyNfts","_jsxs","motion","div","viewport","root","once","transition","type","ease","damping","delay","variants","initial","opacity","whileInView","className","styles","children","_jsx","fallback","Loader","size","image","functional","mineLevel","level","mineLastUpgrade","lastUpgrade","Date","bstrOne","toLocaleString","bstrTwo","lastMined","currentMine","totalMilliseconds","Math","floor","pow","lastUpgradeDate","setTime","getTime","currentTime","Button","onClick","loader","color"],"sourceRoot":""}